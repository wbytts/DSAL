// 100 437420

/*
用JS解决下面这个算法问题；

一群人去餐厅用餐，决定分桌坐，在分桌时要避免出现 1 张桌子只有 1个人的情况
如果只考虑基于人数的分法，不考虑谁坐在哪一桌，那么以 6 人为例，其有以下 4 种分法此时，
2人+2人+2人
2人+4人
3人+3人
6人
如果 1张桌子最多能坐 10 人，那么当有 100 人需要分桌坐时，有多少种分法?

*/

const MAX = 10;
const MIN = 2;

/*
分桌子
1. 还有多少人要分
2. 当前这桌要分多少人

fun(n, num)

fun(100, 2)
  fun(100, 3)
    fun(100, 4)
    fun(96, 3)
  fun(98, 2)
    fun(98, 3)
    fun(96, 2)

*/

// num: 当前要分的 几人桌
function fun(n, num = MIN) {
  // 人数少于0，每桌人数大于上限，人数少于要分的人，为0
  if (n < 0 || num > MAX || n < num) {
    return 0;
  } else if (n == num) {
    // 人数等于要分的人，才确认分一桌
    return 1;
  } else {
    // 人数大于要分的人的时候
    // 将大问题拆分为小问题：这一桌到底分不分
    // 不分：那么下一桌人数+1  fun(n, num + 1)
    // 分  ：那么扣掉分了的人，剩下人的接着分 fun(n - num, num)
    return fun(n, num + 1) + fun(n - num, num);
  }
}

const result = fun(100);
console.log(result);
